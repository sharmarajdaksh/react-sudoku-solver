{"version":3,"sources":["algorithm.js","App.jsx","index.js"],"names":["allowedDigits","getPresetCells","grid","presetCells","i","j","parseInt","push","isSolved","isValidLocation","sleep","ms","Promise","resolve","setTimeout","generateCompleteSolution","a","callback","callback2","allowedDigitsLocal","row","Math","floor","col","some","cell","n","number","path","findEmptySquares","column","isUsedInRow","isUsedInColumn","isUsedInSubgrid","subRow","subCol","App","initializeGrid","handleFormValueChange","e","console","log","target","value","tempGrid","state","setState","renderRow","className","key","map","index","style","backgroundColor","JSON","stringify","currentCell","onChange","persist","maxLength","renderSudoku","r","gridIsInvalid","includes","solveSudoku","isSolving","g","rc","this","onClick","disabled","window","location","reload","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d9805c9.chunk.js","sourcesContent":["const allowedDigits = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nexport const getPresetCells = (grid) => {\n  let presetCells = [];\n\n  for (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 9; j++) {\n      if (parseInt(grid[i][j]) !== 0) {\n        presetCells.push([i, j]);\n      }\n    }\n  }\n\n  return presetCells;\n};\n\nconst isSolved = (grid) => {\n  for (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 9; j++) {\n      if (!isValidLocation(grid, i, j, grid[i][j])) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nconst sleep = (ms) => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\nexport const generateCompleteSolution = async (\n  grid,\n  presetCells = [],\n  callback,\n  callback2\n) => {\n  await sleep(200);\n\n  if (isSolved(grid)) {\n    return true;\n  } else {\n    callback(grid);\n  }\n\n  let allowedDigitsLocal = [...allowedDigits];\n\n  for (let i = 0; i < 81; i++) {\n    const row = Math.floor(i / 9);\n    const col = i % 9;\n\n    if (presetCells.some((cell) => cell === [row, col])) continue;\n\n    if (grid[row][col] === 0) {\n      callback2([row, col]);\n\n      await sleep(200);\n\n      // allowedDigitsLocal = shuffle(allowedDigitsLocal);\n      for (let n = 0; n < 9; n++) {\n        let number = allowedDigitsLocal[n];\n        if (isValidLocation(grid, row, col, number)) {\n          path.push([number, row, col]);\n          grid[row][col] = number;\n\n          if (!findEmptySquares(grid)) {\n            return true;\n          } else {\n            if (\n              await generateCompleteSolution(\n                grid,\n                presetCells,\n                callback,\n                callback2\n              )\n            ) {\n              return true;\n            }\n          }\n        }\n      }\n      grid[row][col] = 0;\n      await sleep(200);\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst isValidLocation = (grid, row, column, number) => {\n  return !(\n    isUsedInRow(grid, row, number) ||\n    isUsedInColumn(grid, column, number) ||\n    isUsedInSubgrid(grid, row, column, number)\n  );\n};\n\nconst isUsedInRow = (grid, row, number) => {\n  if (grid[row].some((n) => parseInt(n) === parseInt(number))) {\n    return true;\n  }\n  return false;\n};\n\nconst isUsedInColumn = (grid, col, number) => {\n  for (let i = 0; i < 9; i++) {\n    if (parseInt(grid[i][col]) === parseInt(number)) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst isUsedInSubgrid = (grid, row, col, number) => {\n  let subRow = Math.floor(row / 3) * 3;\n  let subCol = Math.floor(col / 3) * 3;\n  for (let i = subRow; i < subRow + 3; i++) {\n    for (let j = subCol; j < subCol + 3; j++) {\n      if (parseInt(grid[i][j]) === parseInt(number)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst findEmptySquares = (grid) => {\n  for (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 9; j++) {\n      if (parseInt(grid[i][j]) === 0) return [i, j];\n    }\n  }\n  return;\n};\n\nconst path = [];\n","import React from \"react\";\nimport { generateCompleteSolution, getPresetCells } from \"./algorithm\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  initializeGrid = () => {\n    let grid = [];\n\n    let row = [];\n\n    for (let i = 1; i <= 9; i++) {\n      row = [];\n      for (let j = 1; j <= 9; j++) {\n        row.push(0);\n      }\n      grid.push(row);\n    }\n\n    return grid;\n  };\n\n  constructor() {\n    super();\n    this.state = {\n      grid: this.initializeGrid(),\n      currentCell: [-1, -1],\n      isSolving: false,\n      isSolved: null,\n    };\n  }\n\n  // const [grid, setGrid] = useState(initializeGrid());\n  // const [currentCell, setCurrentCell] = useState([-1, -1]);\n  // const [isSolving, setIsSolving] = useState(false);\n  // const [forcer, forceUpdate] = useState(0);\n  // const [isSolved, setIsSolved] = useState(null);\n\n  handleFormValueChange = (e, row, col) => {\n    console.log(e.target.value, row, col);\n\n    let tempGrid = this.state.grid;\n    tempGrid[row][col] = e.target.value;\n    this.setState({ grid: tempGrid });\n  };\n\n  renderRow = (i) => {\n    return (\n      <div className=\"sudoku_row\" key={i}>\n        {this.state.grid[i].map((cell, index) => {\n          return (\n            <input\n              className=\"sudoku_cell\"\n              style={{\n                backgroundColor:\n                  this.state.isSolved !== null\n                    ? \"transparent\"\n                    : JSON.stringify(this.state.currentCell) ===\n                      JSON.stringify([i, index])\n                    ? \"rgb(186, 248, 243)\"\n                    : \"white\",\n              }}\n              value={this.state.grid[i][index]}\n              key={`${i}-${index}`}\n              onChange={(e) => {\n                e.persist();\n                this.handleFormValueChange(e, i, index);\n              }}\n              maxLength={1}\n            />\n          );\n        })}\n      </div>\n    );\n  };\n\n  renderSudoku = () => {\n    return (\n      <div\n        className=\"sudoku_container\"\n        style={{\n          backgroundColor:\n            this.state.isSolved === \"ERRORED\"\n              ? \"rgb(221, 134, 134)\"\n              : this.state.isSolved === \"SOLVED\"\n              ? \"rgb(136, 238, 141)\"\n              : \"white\",\n        }}\n      >\n        <div>{this.state.grid.map((r, index) => this.renderRow(index))}</div>\n      </div>\n    );\n  };\n\n  gridIsInvalid = () => {\n    let allowedDigits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        if (!allowedDigits.includes(parseInt(this.state.grid[i][j]))) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  solveSudoku = async () => {\n    const presetCells = getPresetCells(this.state.grid);\n    this.setState({ isSolving: true });\n    let didGetSolved = await generateCompleteSolution(\n      this.state.grid,\n      presetCells,\n      (g) => {\n        this.setState({ grid: g });\n      },\n      (rc) => {\n        this.setState({ currentCell: rc });\n      }\n    );\n\n    if (didGetSolved) {\n      this.setState({ isSolved: \"SOLVED\" });\n    } else {\n      this.setState({ isSolved: \"ERRORED\" });\n    }\n\n    this.setState({ currentCell: [-1, -1] });\n\n    this.setState({ isSolving: false });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Backtracking Sudoku Solver</h1>\n        <p>\n          If you value your time, you should probably input a valid\n          configuration to start. Otherwise, you can trigger solving even with\n          an invalid starting grid. Maybe you'll find it enjoyable to watch an\n          algorithm fail despite trying all that it could, like sometimes\n          happens with us in our lives :'(\n        </p>\n        {this.renderSudoku()}\n        <div className=\"buttons\">\n          <button\n            className=\"sudoku_button\"\n            onClick={this.solveSudoku}\n            disabled={this.gridIsInvalid()}\n          >\n            Solve\n          </button>\n          <button\n            onClick={() => {\n              window.location.reload();\n            }}\n          >\n            Reload\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}